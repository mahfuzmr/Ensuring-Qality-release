variables:
 - group: azcreds

name: Azure Pipelines
stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
   # Needed for Terraform VM deployment
    - task: DownloadSecureFile@1
      displayName: Download azcreds.conf file
      name: azcreds
      inputs:
          secureFile: 'azcreds.conf'
   # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'
    #Terraform Install
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'


    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        commandOptions: '-backend-config=$(azcreds.secureFilePath)'
        backendType: 'azurerm'
        backendServiceArm: 'service-connection-azurerm'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate20932'
        backendAzureRmContainerName: 'tfstate'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: true   

    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: service-connection-azurerm
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)

    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:        
        command: 'plan'
        environmentServiceName: 'service-connection-azurerm'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

       
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        environmentServiceName: 'service-connection-azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        allowTelemetryCollection: true
 

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive Fakerestapi
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
      
    - task: PublishPipelineArtifact@1
      displayName: Publish Fakerestapi as Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'
    
- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'service-connection-azurerm'
              appType: 'webApp'
              WebAppName: 'p3testApp-AppService'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
              DeploymentType: zipDeploy   

  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium  
            displayName: Configure VM

