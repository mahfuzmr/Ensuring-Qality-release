variables:
 - group: azcreds

name: Azure Pipelines
stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
   # Needed for Terraform VM deployment
    - task: DownloadSecureFile@1
      displayName: Download azcreds.conf file
      name: azcreds
      inputs:
          secureFile: 'azcreds.conf'
   # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'
    #Terraform Install
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'


    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        commandOptions: '-backend-config=$(azcreds.secureFilePath)'
        backendType: 'azurerm'
        backendServiceArm: 'service-connection-azurerm'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate20932'
        backendAzureRmContainerName: 'tfstate'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # #Terraform Init
    # - task: TerraformCLI@2
    #   displayName: Terraform Init
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     commandOptions: '-backend-config=$(azcreds.secureFilePath)'
    #     backendServiceArm:  service-connection-azurerm
    #     backendAzureRmResourceGroupName: 'tfstate'
    #     backendAzureRmStorageAccountName: 'tfstate20932'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'test.terraform.tfstate'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'   

    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: true   

    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: service-connection-azurerm
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)

    # - task: TerraformCLI@0
    #   displayName: Import existing resource group
    #   inputs:
    #     command: 'import'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceName: 'service-connection-azurerm'
    #     providerAzureRmSubscriptionId: '74214412-f442-4c67-a0ca-85088f71762c'
    #     #runAzLogin: true
    #     allowTelemetryCollection: true
    #     resourceAddress: 'module.resource_group.azurerm_resource_group.test'
    #     resourceId: 'tfstate'
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:        
        command: 'plan'
        environmentServiceName: 'service-connection-azurerm'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    # - task: TerraformTaskV3@3
    #   displayName: 'Terraform Plan'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     environmentServiceNameAzureRM: service-connection-azurerm
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
       
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        environmentServiceName: 'service-connection-azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        allowTelemetryCollection: true
        
    # #Terraform Apply
    # - task: TerraformTaskV2@2
    #   displayName: Terraform Apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     commandOptions: '-auto-approve'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: 'service-connection-azurerm'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive Fakerestapi
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
      
    - task: PublishPipelineArtifact@1
      displayName: Publish Fakerestapi as Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi
# - stage: Deploy
#   jobs:
#   - deployment: Deploy FakeRestAPI
#     pool:
#       vmImage: 'ubuntu-18.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''
#               appName: ''
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


