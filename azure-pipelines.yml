variables:
 - group: azcreds

name: Azure Pipelines
stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
   # Needed for Terraform VM deployment
    - task: DownloadSecureFile@1
      displayName: Download azcreds.conf file
      name: azcreds
      inputs:
          secureFile: 'azcreds.conf'
   # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'
    #Terraform Install
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'


    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        commandOptions: '-backend-config=$(azcreds.secureFilePath)'
        backendType: 'azurerm'
        backendServiceArm: 'service-connection-azurerm'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate20932'
        backendAzureRmContainerName: 'tfstate'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: true   

    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: service-connection-azurerm
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)

    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:        
        command: 'plan'
        environmentServiceName: 'service-connection-azurerm'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

       
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
        command: 'apply'
        environmentServiceName: 'service-connection-azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        allowTelemetryCollection: true
 

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive Fakerestapi
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
      
    - task: PublishPipelineArtifact@1
      displayName: Publish Fakerestapi as Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/automatedtesting/jmeter/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'
    
- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'service-connection-azurerm'
              appType: 'webApp'
              WebAppName: 'p3testApp-AppService'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
              DeploymentType: zipDeploy   

- stage: Test
  jobs:
  - job: IntegrationTests
    displayName: Integration Tests
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Apply Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/regression.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-regression.xml'
        workingDirectory:  $(System.DefaultWorkingdirectory)
    - task: CmdLine@2
      displayName: Apply Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/validation.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-validation.xml'
        workingDirectory: $(System.DefaultWorkingdirectory)
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/' 
        publishRunAttachments: true 

  - job: UITests
    displayName: Selenuim UI Tests
    steps:
    - task: Bash@3
      displayName: 'Setup VM environment'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          sudo apt-get upgrade -y
          sudo apt-get install python3-pip -y
          sudo apt-get install unzip -y
    - task: Bash@3
      displayName: 'Configure Selenium, Chromium & chromedriver'
      inputs:
        targetType: 'inline'
        script: |
          #install chromium & selenium
          sudo apt-get install -y chromium-browser
          pip3 install selenium
          
          #install chromedriver & export path
          if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
            wget https://chromedriver.storage.googleapis.com/100.0.4896.20/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
          fi
          export PATH=$PATH:$(Pipeline.Workspace)/chromedriver 
          if [ ! -d /var/log/selenium ]; then
                 sudo mkdir /var/log/selenium
                 sudo chmod 777 /var/log/selenium
          fi        
    - task: Bash@3
      displayName: 'Run UI test'
      inputs:
        targetType: 'inline'
        script: |          
          python3 ./automatedtesting/selenium/selenium_ui.py

  - job: PerformanceTest
    displayName: Test JMeter
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        mkdir -p log/jmeter
        if [ ! -d /var/log/jmeter ]; then
                sudo mkdir /var/log/jmeter
                sudo chmod 777 /var/log/jmeter
        fi
        if [ ! -d /var/log/jmeter/stress-test-html-report ]; then
                sudo mkdir /var/log/jmeter/stress-test-html-report
                sudo chmod 777 /var/log//stress-test-html-report
        fi  
        if [ ! -d /var/log/jmeter/endurance-test-html-report ]; then
                sudo mkdir /var/log/jmeter/endurance-test-html-report
                sudo chmod 777 /var/log/jmeter/endurance-test-html-report
        fi  
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/stress.jmx \
                                     -l log/jmeter/stress-test-result.csv \
                                     -e -f -o log/jmeter/stress-test-html-report \
                                     -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter Stress Test
    - bash: |
        apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/endurance.jmx \
                                     -l log/jmeter/endurance-test-result.csv \
                                     -e -f -o log/jmeter/endurance-test-html-report \
                                     -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter Endurance Test
    - task: ArchiveFiles@2
      displayName: Saving JMeter stress test report to artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Saving JMeter endurance test report to artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter-logs'